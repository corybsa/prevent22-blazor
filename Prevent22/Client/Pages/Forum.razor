@page "/forum"
@implements IDisposable
@inject IToastService ToastService
@inject Services.IBoardService BoardService
@inject Services.IFlyoutService Flyout
@inject NavigationManager NavigationManager
@using Prevent22.Shared
@using Auth

<style>
	div.board:hover {
		cursor: pointer;
		background: lightgrey !important;
	}

	div.board:nth-child(2n) {
		background: hsl(0, 0%, 95%);
	}
</style>

<div class="px-4 p-4">
	<div class="container">
		@if (boards == null)
		{
			<Loader />
		}
		else
		{
			<AuthorizeView Policy="@Policies.IsModerator">
				<Authorized>
					<TelerikButton Class="mb-3 k-button-p22" @onclick="CreateBoard">Create new board</TelerikButton>
				</Authorized>
			</AuthorizeView>
			<TelerikListView Data="@boards" Pageable="true">
				<HeaderTemplate>
					<div class="container" style="background: hsl(210, 17%, 98%);">
						<div class="row">
							<div class="col-4 col-md-4 col-lg-5">
								<h6 class="mt-1 mb-1">Board</h6>
							</div>
							<div class="col-2 text-center">
								<h6 class="mt-1 mb-1">Threads</h6>
							</div>
							<div class="col-2 text-center d-none d-md-block">
								<h6 class="mt-1 mb-1">Posts</h6>
							</div>
							<div class="col-4 col-md-2 text-center">
								<h6 class="mt-1 mb-1">Last Post</h6>
							</div>
							<div class="col-2 col-lg-1">
								&nbsp;
							</div>
						</div>
					</div>
				</HeaderTemplate>
				<Template>
					<div class="container board">
						<div class="row pt-2 pb-2">
							<div style="display: contents;" @onclick="@(() => GoToThreads(context.BoardId))">
								<div class="col-4 col-md-4 col-lg-5">
									<p class="m-0">@context.BoardName</p>
									<p class="m-0" style="font-size: 0.9rem;">@context.BoardDescription</p>
								</div>
								<div class="col-2 text-center">
									<p class="m-0">@context.ThreadCount</p>
								</div>
								<div class="col-2 text-center d-none d-md-block">
									<p class="m-0">@context.PostCount</p>
								</div>
								<div class="col-4 col-md-2 text-center">
									<p class="m-0">@(context.LastPostDate != null ? context.LastPostDate?.ToString("MM/dd/yyyy hh:mm tt") : "No Posts")</p>

									@if (context.LastPostDate != null)
										{
										<p class="m-0" style="font-size: 0.9rem;">by @context.LastPostAuthor</p>
										}
								</div>
							</div>
							<div class="col-2 col-lg-1">
								<AuthorizeView Policy="@Policies.IsModerator" Context="actionsContext">
									<Authorized>
										<button class="btn btn-info" @onclick="() => EditBoard(context)" style="font-size: 0.7rem; margin-bottom: 5px;"><i class="fa fa-pen"></i></button>
										<button class="btn btn-danger" @onclick="() => DeleteBoard(context)"><i class="fa fa-times"></i></button>
									</Authorized>
								</AuthorizeView>
							</div>
						</div>
					</div>
				</Template>
			</TelerikListView>
		}
	</div>
</div>

@code {
	private List<Board> boards;

	protected override async Task OnInitializedAsync()
	{
		await GetData();
	}

	private async Task GetData()
	{
		try
		{
			var res = await BoardService.GetBoards();

			if (res.Success)
			{
				boards = res.Data;
			}
			else
			{
				ToastService.ShowError(res.Info, "Error");
			}
		}
		catch (Exception e)
		{
			ToastService.ShowError(e.Message, "Error");
		}

		StateHasChanged();
	}

	private void GoToThreads(int? boardId)
	{
		NavigationManager.NavigateTo($"/forum/{boardId}");
	}

	private void CreateBoard()
	{
		Flyout.Open("Create new board", typeof(Client.Flyout.Boards.BoardsAdd));
		Flyout.OnSuccess = async () => await GetData();
	}

	private void EditBoard(Board board)
	{
		Flyout.Open<Board>($"Edit {board.BoardName}", typeof(Client.Flyout.Boards.BoardsUpdate), board);
		Flyout.OnSuccess = async () => await GetData();
	}

	private async Task DeleteBoard(Board board)
	{
		try
		{
			var res = await BoardService.DeleteBoard(board.BoardId);

			if (res.Success)
			{
				boards = res.Data;
				ToastService.ShowSuccess("Board deleted", "Success");
			}
			else
			{
				ToastService.ShowError(res.Info, "Error");
			}
		}
		catch (Exception e)
		{
			ToastService.ShowError(e.Message, "Error");
		}
	}

	public void Dispose()
	{
		Flyout.OnSuccess = null;
	}
}
