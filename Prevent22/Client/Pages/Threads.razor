@page "/forum/{boardId:int}"
@implements IDisposable
@inject Services.IThreadService ThreadService
@inject Services.IBoardService BoardService
@inject IToastService ToastService
@inject Services.IFlyoutService Flyout
@inject NavigationManager NavigationManager
@using Auth
@using Prevent22.Shared

<style>
	div.thread:hover {
		cursor: pointer;
		background: lightgrey !important;
	}

	div.thread:nth-child(2n) {
		background: hsl(0, 0%, 95%);
	}

	div.thread.closed {
		color: hsl(0, 0%, 70%);
		cursor: default;
		background: initial !important;
	}

	div.thread.closed .thread-info {
		pointer-events: none;
	}

	div.thread.closed .fa-lock {
		display: inline !important;
	}
</style>

<div class="px-4 p-4">
	<div class="container">
		@if (threads == null)
		{
			<Loader />
		}
		else
		{
			<AuthorizeView>
				<Authorized>
					<TelerikButton Class="mb-3 k-button-p22" @onclick="CreateThread">Create new thread</TelerikButton>
				</Authorized>
			</AuthorizeView>
			<TelerikListView Data="@threads" Pageable="true">
				<HeaderTemplate>
					<div class="container" style="background: hsl(210, 17%, 98%);">
						<div class="row">
							<div class="col-5 col-md-4">
								<h6 class="mt-1 mb-1">Thread</h6>
							</div>
							<div class="col-2 text-center d-none d-md-block">
								<h6 class="mt-1 mb-1">Posts</h6>
							</div>
							<div class="col-5 col-md-4 text-center">
								<h6 class="mt-1 mb-1">Last Post</h6>
							</div>
							<div class="col-2 col-lg-2">
								&nbsp;
							</div>
						</div>
					</div>
				</HeaderTemplate>
				<Template>
					<div class="container thread @(context.IsClosed ? "closed" : null)">
						<div class="row pt-2 pb-2">
							<div class="thread-info" style="display: contents;" @onclick="@(() => GoToPosts(context))">
								<div class="col-5 col-md-4">
									<p class="m-0">@context.ThreadName <i class="fa fa-lock" style="display: none;"></i></p>
									<p class="m-0" style="font-size: 0.9rem;">@context.ThreadName</p>
								</div>
								<div class="col-2 text-center d-none d-md-block">
									<p class="m-0">@context.PostCount</p>
								</div>
								<div class="col-5 col-md-4 text-center">
									<p class="m-0">@(context.LastPostDate != null ? context.LastPostDate?.ToString("MM/dd/yyyy hh:mm tt") : "No Posts")</p>

									@if (context.LastPostDate != null && !string.IsNullOrEmpty(context.LastPostAuthor))
										{
										<p class="m-0" style="font-size: 0.9rem;">by @context.LastPostAuthor</p>
										}
								</div>
							</div>
							<div class="col-2 col-lg-2">
								<AuthorizeView Policy="@Policies.IsModerator" Context="actionsContext">
									<Authorized>
										<button class="btn btn-info" @onclick="() => EditThread(context)" style="font-size: 0.7rem; margin-bottom: 5px;"><i class="fa fa-pen"></i></button>
										<button class="btn btn-danger" @onclick="() => DeleteThread(context)"><i class="fa fa-times"></i></button>
									</Authorized>
								</AuthorizeView>
							</div>
						</div>
					</div>
				</Template>
			</TelerikListView>
		}
	</div>
</div>

@code {
		[Parameter]
		public int boardId { get; set; }

	private List<Thread> threads;

	protected override async Task OnInitializedAsync()
	{
		await GetData();
	}

	private async Task GetData()
	{
		try
		{
			var res = await BoardService.GetBoardThreads(boardId);

			if (res.Success)
			{
				threads = res.Data;
			}
			else
			{
				ToastService.ShowError(res.Info);
			}
		}
		catch (Exception e)
		{
			ToastService.ShowError(e.Message, "Error");
		}

		StateHasChanged();
	}

	private void GoToPosts(Thread thread)
	{
		if (!thread.IsClosed)
		{
			NavigationManager.NavigateTo($"/forum/{boardId}/thread/{thread.ThreadId}/posts");
		}
	}

	private void CreateThread()
	{
		Flyout.Open<int>("Create new thread", typeof(Client.Flyout.Threads.ThreadsAdd), boardId);
		Flyout.OnSuccess = async () => await GetData();
	}

	private void EditThread(Thread thread)
	{

		Flyout.Open<Thread>($"Edit {thread.ThreadName}", typeof(Client.Flyout.Threads.ThreadsUpdate), thread);
		Flyout.OnSuccess = async () => await GetData();
	}

	private async Task DeleteThread(Thread thread)
	{
		try
		{
			var res = await ThreadService.DeleteThread(thread.ThreadId);

			if (res.Success)
			{
				threads = res.Data;
				ToastService.ShowSuccess("Thread deleted", "Success");
			}
			else
			{
				ToastService.ShowError(res.Info, "Error");
			}
		}
		catch (Exception e)
		{
			ToastService.ShowError(e.Message, "Error");
		}
	}

	public void Dispose()
	{
		Flyout.OnSuccess = null;
	}
}
