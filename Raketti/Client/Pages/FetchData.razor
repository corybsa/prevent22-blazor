@page "/fetchdata"
@attribute [Authorize]
@using Raketti.Shared
@inject AuthenticationStateProvider AuthStateProvider
@inject IToastService ToastService
@inject Services.IUserService UserService
@inject Services.IFlyoutService Flyout

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (users == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<TelerikGrid Data="users"
				 Pageable="true"
				 Sortable="true"
				 FilterMode="GridFilterMode.FilterMenu"
				 Resizable="true"
				 ShowColumnMenu="true">
		<GridColumns>
			<GridColumn Field="@(nameof(User.UserId))" Title="ID" />
			<GridColumn Field="@(nameof(User.FirstName))" Title="First Name" />
			<GridColumn Field="@(nameof(User.LastName))" Title="Last Name" />
			<GridCommandColumn>
				<GridCommandButton OnClick="@OpenFlyout">Add</GridCommandButton>
			</GridCommandColumn>
		</GridColumns>
	</TelerikGrid>
}

@code {
	List<User> users;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			var res = await UserService.GetUsers();

			if (!res.Success)
			{
				ToastService.ShowError(res.Info, "Error");
			}
			else
			{
				users = res.Data;
			}
		}
		catch (Exception e)
		{
			ToastService.ShowError(e.Message, "Error");
		}
	}

	private void OpenFlyout(GridCommandEventArgs e)
	{
		User user = (User)e.Item;
		Flyout.Open<User>($"Info for {user.Username}", typeof(TestFlyoutContent), user);
	}
}
