@page "/register"
@inject Services.IAuthService AuthService
@inject IToastService ToastService
@inject NavigationManager NavigationManager
@inject Services.BrowserService BrowserService
@inject Microsoft.JSInterop.IJSRuntime js
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider
@using Prevent22.Shared

<div class="main" style="background-image: url('images/flag-at-sunset-cropped.jpg'); background-size: cover; background-position: center;">
	<div class="container-fluid">
		<div class="row align-items-center justify-content-center" style="height: @(windowHeight)px">
			<div class="col-12 col-sm-8 col-lg-6">
				<div class="card">
					<div class="card-body">
						<EditForm Model="@user" OnValidSubmit="Submit">
							<DataAnnotationsValidator />
							<div class="form-group">
								<label for="username">Username</label>
								<InputText id="username" @bind-Value="user.Username" class="form-control" />
								<ValidationMessage For="@(() => user.Username)" />
							</div>
							<div class="form-group">
								<label for="password">Password</label>
								<InputText id="password" @bind-Value="user.Password" type="password" class="form-control" />
								<ValidationMessage For="@(() => user.Password)" />
							</div>
							<div class="form-group">
								<label for="confirmPassword">Confirm Password</label>
								<InputText id="confirmPassword" @bind-Value="user.ConfirmPassword" type="password" class="form-control" />
								<ValidationMessage For="@(() => user.ConfirmPassword)" />
							</div>
							<button type="submit" class="btn btn-danger">Register</button>
							<p>Already have an account? <a href="/login" class="p22-link">Click here to login</a>.</p>
						</EditForm>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

@code {
	private UserRegister user = new UserRegister();
	private int windowHeight;

	private async Task Submit()
	{
		try
		{
			var res = await AuthService.Register(user);

			if (res.Success)
			{
				// hopefully clear password from memory
				user.Password = null;
				Services.AuthService.IsLoggedIn = true;
				await LocalStorage.SetItemAsync<int>(LocalStorageKey.UserId, res.Data.UserId);
				await LocalStorage.SetItemAsync<string>(LocalStorageKey.Token, res.Message);
				await AuthStateProvider.GetAuthenticationStateAsync();
				Services.UserService.user = res.Data;
				NavigationManager.NavigateTo("");
			}
			else
			{
				ToastService.ShowError(res.Message);
			}
		}
		catch (Exception e)
		{
			ToastService.ShowError(e.Message, "An error occurred. Please contact an admin.");
		}
	}

	protected override async Task OnInitializedAsync()
	{
		// listen for browser resize
		Prevent22.Client.Services.BrowserService.OnResize += BrowserHasResized;
		await js.InvokeAsync<object>("Prevent22.registerResizeCallback");

		windowHeight = await BrowserService.GetHeight();
	}

	private async Task BrowserHasResized()
	{
		windowHeight = await BrowserService.GetHeight();

		// let blazor know that the state changed so it rerenders the ui
		StateHasChanged();
	}
}
