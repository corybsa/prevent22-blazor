@using Prevent22.Shared;
@inject Services.IRolesService RolesService
@inject Services.IUserService UserService
@inject IToastService ToastService
@inject Services.IFlyoutService Flyout

<EditForm Model="Data" OnValidSubmit="Submit">
	<DataAnnotationsValidator />
	<div class="row">
		<div class="col-12 col-sm-6">
			<div class="mb-2">
				<label for="firstName">First Name</label>
				<TelerikTextBox Id="firstName" @bind-Value="Data.FirstName" AutoComplete="given-name" Width="100%" />
				<ValidationMessage For="@(() => Data.FirstName)" />
			</div>
		</div>
		<div class="col-12 col-sm-6">
			<div class="mb-2">
				<label for="lastName">Last Name</label>
				<TelerikTextBox @bind-Value="Data.LastName" AutoComplete="family-name" Width="100%" />
				<ValidationMessage For="@(() => Data.LastName)" />
			</div>
		</div>
	</div>
	<div class="row">
		<div class="col-12 col-sm-6">
			<div class="mb-2">
				<label for="email">Email</label>
				<TelerikTextBox Id="email" @bind-Value="Data.Email" AutoComplete="email" InputMode="email" Width="100%" />
				<ValidationMessage For="@(() => Data.Email)" />
			</div>
		</div>
		<div class="col-12 col-sm-6">
			<div class="mb-2">
				<label for="roleId">Role</label>
				@if (roles != null)
				{
					<TelerikDropDownList Id="roleId"
										 Data="@roles"
										 TextField="RoleName"
										 ValueField="RoleId"
										 @bind-Value="Data.RoleId"
										 DefaultText="Select a role..."
										 Width="100%">
					</TelerikDropDownList>
					<ValidationMessage For="@(() => Data.RoleId)" />
				}
			</div>
		</div>
	</div>
	<div class="row">
		<div class="col-12 col-sm-6">
			<div class="mb-2">
				<label for="country">Country</label>
				<TelerikTextBox Id="country" @bind-Value="Data.Country" AutoComplete="country-name" Width="100%" />
				<ValidationMessage For="@(() => Data.Country)" />
			</div>
		</div>
		<div class="col-12 col-sm-6">
			<div class="mb-2">
				<label for="state">State</label>
				<TelerikTextBox Id="state" @bind-Value="Data.State" AutoComplete="address-level1" Width="100%" />
				<ValidationMessage For="@(() => Data.State)" />
			</div>
		</div>
	</div>
	<div class="row">
		<div class="col-12 col-sm-6">
			<div class="mb-2">
				<label for="city">City</label>
				<TelerikTextBox Id="city" @bind-Value="Data.City" AutoComplete="address-level2" Width="100%" />
				<ValidationMessage For="@(() => Data.City)" />
			</div>
		</div>
		<div class="col-12 col-sm-6">
			<div class="mb-2">
				<label for="zipCode">Zip Code</label>
				<TelerikTextBox Id="zipCode" @bind-Value="Data.ZipCode" AutoComplete="postal-code" Width="100%" />
				<ValidationMessage For="@(() => Data.ZipCode)" />
			</div>
		</div>
	</div>
	<div class="row">
		<div class="col-12 col-sm-6">
			<div class="mb-2">
				<label for="address">Address</label>
				<TelerikTextBox Id="address" @bind-Value="Data.Address" AutoComplete="street-address" Width="100%" />
				<ValidationMessage For="@(() => Data.Address)" />
			</div>
		</div>
		<div class="col-12 col-sm-6">
			<div class="mb-2">
				<label for="phone">Phone</label>
				<TelerikTextBox Id="phone" @bind-Value="Data.Phone" InputMode="tel" AutoComplete="tel" Width="100%" />
				<ValidationMessage For="@(() => Data.Phone)" />
			</div>
		</div>
	</div>
	<div class="mb-2 form-check">
		<TelerikCheckBox Id="isBanned" @bind-Value="@Data.IsBanned" />
		<label for="isBanned">Banned from forum?</label>
	</div>
	@if (Data.IsBanned)
	{
		<div class="row">
			<div class="col-12 col-sm-6">
				<div class="mb-2">
					<label for="bannedUntil">Banned Until</label>
					<TelerikDateTimePicker Id="bannedUntil" Min="@DateTime.Now" @bind-Value="@Data.BannedUntil" Format="MM/dd/yyyy HH:mm" Width="100%" />
				</div>
			</div>
		</div>
	}
	<button type="submit" class="btn btn-p22">Submit</button>
</EditForm>

@code {
	[Parameter]
	public User Data { get; set; }

	private List<SystemRole> roles;

	protected override async Task OnInitializedAsync()
	{
		await GetData();
	}

	private async Task GetData()
	{
		try
		{
			var res = await RolesService.GetRoles();

			if (!res.Success)
			{
				ToastService.ShowError(res.Info, "Error");
			}
			else
			{
				roles = res.Data;
			}
		}
		catch (Exception e)
		{
			ToastService.ShowError(e.Message);
		}
	}

	private async Task Submit()
	{
		try
		{
			var res = await UserService.UpdateUser(Data);

			if (!res.Success)
			{
				ToastService.ShowError(res.Info, "Error");
			}
			else
			{
				ToastService.ShowSuccess("User updated", "Success");
				Flyout.OnSuccess?.Invoke();
				Flyout.Close();
			}
		}
		catch (Exception e)
		{
			ToastService.ShowError(e.Message, "Error");
		}
	}
}
