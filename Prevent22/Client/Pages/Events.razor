@page "/events"
@implements IDisposable
@inject Services.IFlyoutService Flyout
@inject Services.BrowserService BrowserService
@inject Services.IEventService EventService
@inject IToastService ToastService
@using Prevent22.Shared
@using Auth

<div class="px-4 p-4">
	<div class="container-fluid">
		@if (events == null)
		{
			<Loader />
		}
		else
		{
			@if (IsMobile)
			{
				<AuthorizeView Policy="@Policies.IsAdmin">
					<div style="height: 45px;">
						<button id="mobile-create-event" class="btn btn-danger" type="button" style="float: right;" @onclick="() => MobileEditEvent(true, null)">Create event</button>
					</div>
				</AuthorizeView>
			}

			<TelerikScheduler Data="@events"
							  @ref="calendar"
							  AllowCreate="Services.UserService.user?.RoleId == SystemRole.Admin"
							  AllowUpdate="true"
							  AllowDelete="Services.UserService.user?.RoleId == SystemRole.Admin"
							  @bind-View="CurrentView"
							  IdField="@(nameof(Event.EventId))"
							  OnUpdate="@UpdateEvent"
							  OnEdit="@EditEvent"
							  OnDelete="@DeleteEvent">
				<SchedulerViews>
					<SchedulerDayView />
					<SchedulerWeekView />
					<SchedulerMonthView />
				</SchedulerViews>
				<AllDayItemTemplate>
					@{
							var evnt = context as Event;
						<div title="@evnt.Start.ToShortDateString() - @evnt.Title" style="height: 100%;" @onclick="() => MobileEditEvent(false, evnt)">
							@evnt.Title (@evnt.VolunteerCount going)
						</div>
					}
				</AllDayItemTemplate>
				<ItemTemplate>
					@{
							var evnt = context as Event;
						<div title="@evnt.Start.ToShortDateString() - @evnt.Title" style="height: 100%;" @onclick="() => MobileEditEvent(false, evnt)">
							@evnt.Title (@evnt.VolunteerCount going)
						</div>
					}
				</ItemTemplate>
			</TelerikScheduler>
		}
	</div>
</div>

@code {
	public List<Event> events;
	public SchedulerView CurrentView { get; set; } = SchedulerView.Month;
	private TelerikScheduler<Event> calendar;
	private bool IsMobile = false;

	protected override async Task OnInitializedAsync()
	{
		await CheckMobile();
		await GetData();
	}

	private async Task GetData()
	{
		try
		{
			var res = await EventService.GetEvents();

			if (!res.Success)
			{
				ToastService.ShowError(res.Info, "Error");
			}
			else
			{
				events = res.Data;
			}
		}
		catch (Exception e)
		{
			ToastService.ShowError(e.Message, "Error");
		}

		StateHasChanged();
	}

	private async Task UpdateEvent(SchedulerUpdateEventArgs args)
	{
		Event e = args.Item as Event;

		try
		{
			var res = await EventService.UpdateEvent(e);

			if (!res.Success)
			{
				ToastService.ShowError(res.Info);
			}
			else
			{
				events = res.Data;
				ToastService.ShowSuccess("Event updated", "Success");
			}
		}
		catch (Exception ex)
		{
			ToastService.ShowError(ex.Message);
		}
	}

	private void EditEvent(SchedulerEditEventArgs args)
	{
		Event e = args.Item as Event;
		var user = Services.UserService.user;

		// user is not logged in, or is not allowed to edit
		if (user == null || user?.RoleId != SystemRole.Admin)
		{
			Flyout.Open<Event>($"Volunteer for {e.Title}", typeof(Client.Flyout.Events.VolunteerAdd), e);
			Flyout.OnSuccess = async () => await GetData();
		}
		else if (!args.IsNew) // an edit operation
		{
			Flyout.Open<Event>($"Update {e.Title}", typeof(Client.Flyout.Events.EventUpdate), e);
			Flyout.OnSuccess = async () => await GetData();
		}
		else // a create operation
		{
			e = new Event() { Start = args.Start, End = args.End };
			Flyout.Open<Event>("Create event", typeof(Client.Flyout.Events.EventAdd), e);
			Flyout.OnSuccess = async () => await GetData();
		}

		// prevent default window from opening
		args.IsCancelled = true;
	}

	private async Task DeleteEvent(SchedulerDeleteEventArgs args)
	{
		Event e = args.Item as Event;

		try
		{
			var res = await EventService.DeleteEvent(e.EventId);

			if (!res.Success)
			{
				ToastService.ShowError(res.Info);
			}
			else
			{
				events = res.Data;
				ToastService.ShowSuccess("Event deleted", "Success");
			}
		}
		catch (Exception ex)
		{
			ToastService.ShowError(ex.Message);
		}
	}

	private void MobileEditEvent(bool isNew, Event evnt)
	{
		if (evnt == null)
		{
			evnt = new Event();
		}

		var args = new SchedulerEditEventArgs()
		{
			Item = evnt,
			IsNew = isNew,
			Start = calendar.Date,
			End = calendar.Date.AddMinutes(30)
		};

		EditEvent(args);
	}

	private async Task CheckMobile()
	{
		int windowWidth = await BrowserService.GetWidth();

		if (windowWidth < 768)
		{
			CurrentView = SchedulerView.Day;
			IsMobile = true;
		}
		else
		{
			CurrentView = SchedulerView.Month;
			IsMobile = false;
		}
	}

	public void Dispose()
	{
		Flyout.OnSuccess = null;
	}
}
