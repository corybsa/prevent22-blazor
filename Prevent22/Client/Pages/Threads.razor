@page "/forum/{boardId:int}"
@implements IDisposable
@inject Services.IThreadService ThreadService
@inject Services.IBoardService BoardService
@inject IToastService ToastService
@inject Services.IFlyoutService Flyout
@inject NavigationManager NavigationManager
@using Auth
@using Prevent22.Shared

<style>
	div.thread:hover {
		cursor: pointer;
		background: lightgrey;
	}

	div.thread:nth-child(2n) {
		background: hsl(0, 0%, 95%);
	}
</style>

<div class="px-4 p-4">
	<div class="container">
		<AuthorizeView Policy="@Policies.IsAdmin">
			<TelerikButton Class="mb-3" @onclick="CreateThread">Create new thread</TelerikButton>
		</AuthorizeView>
		<TelerikListView Data="@threads" Pageable="true">
			<HeaderTemplate>
				<div class="container" style="background: hsl(210, 17%, 98%);">
					<div class="row">
						<div class="col-6">
							<h6 class="mt-1 mb-1">Thread</h6>
						</div>
						<div class="col-2 text-center d-none d-sm-block">
							<h6 class="mt-1 mb-1">Posts</h6>
						</div>
						<div class="col-6 col-sm-4 text-center">
							<h6 class="mt-1 mb-1">Last Post</h6>
						</div>
					</div>
				</div>
			</HeaderTemplate>
			<Template>
				<div class="container thread" @onclick="@(() => GoToPosts(context.ThreadId))">
					<div class="row pt-2 pb-2">
						<div class="col-6">
							<p class="m-0">@context.ThreadName</p>
							<p class="m-0" style="font-size: 0.9rem;">@context.ThreadName</p>
						</div>
						<div class="col-2 text-center d-none d-md-block">
							<p class="m-0">@context.PostCount</p>
						</div>
						<div class="col-6 col-sm-4 text-center">
							<p class="m-0">@Utils.GetHumanDate(context.LastPostDate)</p>

							@if (context.LastPostDate != null && !string.IsNullOrEmpty(context.LastPostAuthor))
							{
								<p class="m-0" style="font-size: 0.9rem;">by @context.LastPostAuthor</p>
							}
						</div>
					</div>
				</div>
			</Template>
		</TelerikListView>
	</div>
</div>

@code {
	[Parameter]
	public int boardId { get; set; }

	private List<Thread> threads;

	protected override async Task OnInitializedAsync()
	{
		await GetData();
	}

	private async Task GetData()
	{
		try
		{
			var res = await BoardService.GetBoardThreads(boardId);

			if (res.Success)
			{
				threads = res.Data;
			}
			else
			{
				ToastService.ShowError(res.Info);
			}
		}
		catch (Exception e)
		{
			ToastService.ShowError(e.Message);
		}
	}

	private void GoToPosts(int? threadId)
	{
		NavigationManager.NavigateTo($"/forum/{boardId}/thread/{threadId}/posts");
	}

	private void CreateThread()
	{
		Flyout.Open<int>("Create new thread", typeof(Client.Flyout.Threads.ThreadsAdd), boardId);
		Flyout.OnSuccess = async () =>
		{
			await GetData();
			StateHasChanged();
		};
	}

	public void Dispose()
	{

	}
}
