@page "/events"
@implements IDisposable
@inject Services.IFlyoutService Flyout
@inject Services.BrowserService BrowserService
@inject Services.IEventService EventService
@inject IToastService ToastService
@using Prevent22.Shared
@using Auth

<div class="px-4 p-4">
	<div class="container-fluid">
		@if (events == null)
		{
			<Loader />
		}
		else
		{
			<TelerikScheduler Data="@events"
							  AllowCreate="Services.UserService.user?.RoleId == SystemRole.Admin"
							  AllowUpdate="Services.UserService.user?.RoleId == SystemRole.Admin"
							  AllowDelete="Services.UserService.user?.RoleId == SystemRole.Admin"
							  @bind-View="CurrentView"
							  IdField="@(nameof(Event.EventId))"
							  OnUpdate="@UpdateEvent"
							  OnEdit="@EditEvent"
							  OnDelete="@DeleteEvent">
				<SchedulerViews>
					<SchedulerDayView />
					<SchedulerWeekView />
					<SchedulerMonthView />
				</SchedulerViews>
			</TelerikScheduler>
		}
	</div>
</div>

@code {
	public List<Event> events;
	public SchedulerView CurrentView { get; set; } = SchedulerView.Month;

	protected override async Task OnInitializedAsync()
	{
		await CheckMobile();
		await GetData();
	}

	private async Task GetData()
	{
		try
		{
			var res = await EventService.GetEvents();

			if (!res.Success)
			{
				ToastService.ShowError(res.Info, "Error");
			}
			else
			{
				events = res.Data;
			}
		}
		catch (Exception e)
		{
			ToastService.ShowError(e.Message, "Error");
		}

		StateHasChanged();
	}

	private async Task UpdateEvent(SchedulerUpdateEventArgs args)
	{
		Event e = args.Item as Event;

		try
		{
			var res = await EventService.UpdateEvent(e);

			if (!res.Success)
			{
				ToastService.ShowError(res.Info);
			}
			else
			{
				events = res.Data;
				ToastService.ShowSuccess("Event updated", "Success");
			}
		}
		catch (Exception ex)
		{
			ToastService.ShowError(ex.Message);
		}
	}

	private void EditEvent(SchedulerEditEventArgs args)
	{
		Event e = args.Item as Event;

		// an edit operation
		if (!args.IsNew)
		{
			Flyout.Open<Event>($"Update {e.Title}", typeof(Client.Flyout.Events.EventUpdate), e);
			Flyout.OnSuccess = async () => await GetData();
		}
		else
		{
			// a create operation
			e = new Event() { Start = args.Start, End = args.End };
			Flyout.Open<Event>("Create event", typeof(Client.Flyout.Events.EventAdd), e);
			Flyout.OnSuccess = async () => await GetData();
		}

		// prevent default window from opening
		args.IsCancelled = true;
	}

	private async Task DeleteEvent(SchedulerDeleteEventArgs args)
	{
		Event e = args.Item as Event;

		try
		{
			var res = await EventService.DeleteEvent(e.EventId);

			if (!res.Success)
			{
				ToastService.ShowError(res.Info);
			}
			else
			{
				events = res.Data;
				ToastService.ShowSuccess("Event deleted", "Success");
			}
		}
		catch (Exception ex)
		{
			ToastService.ShowError(ex.Message);
		}
	}

	private async Task CheckMobile()
	{
		int windowWidth = await BrowserService.GetWidth();

		if (windowWidth < 768)
		{
			CurrentView = SchedulerView.Day;
		}
		else
		{
			CurrentView = SchedulerView.Month;
		}
	}

	public void Dispose()
	{
		Flyout.OnSuccess = null;
	}
}
